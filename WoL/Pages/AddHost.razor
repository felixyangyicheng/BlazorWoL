@page "/AddHost"

@using WoL.Data
@using WoL.Models
@using WoL.Models.ViewModels
@using WoL.Services
@using WoL.Extensions
@using Microsoft.Extensions.Logging
@using System.Net.Sockets
@inject IHostService HostService
@inject IAddressLookupService AddressService
@inject NavigationManager NavigationManager
@inject ILogger<AddHost> L

<div class="container">
    <h2>Add Host</h2>

    <hr />

    <p>
        Add a new host by entering a caption and <em>either</em> a hostname/IP address <em>or</em> a mac address (but not both). If you enter a hostname/IP address the mac address will be determined automatically and the entered value will be replaced by the one found using DNS. Please note that adding hosts by hostname might only work if they are currently powered on, as the mac address can not be determined automatically otherwise (via ARP).
    </p>
    <div class="row">
        <div class="col-md-8 col-lg-6 col-xl-4">
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
                @if (!string.IsNullOrEmpty(Alert))
                {
                    <div class="alert alert-danger">@Alert</div>
                }
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Host.Caption" class="control-label">Title</label>
                    <InputText @bind-Value="model.Caption" class="form-control" />
                    <span asp-validation-for="Host.Caption" class="text-danger"></span>
                </div>
                <hr />
                <div class="form-group">
                    <label asp-for="Host.Hostname" class="control-label">Hostname/IP address</label>
                    <InputText @bind-Value="model.Hostname" class="form-control" />
                    <span asp-validation-for="Host.Hostname" class="text-danger"></span>
                </div>
                <p>
                    <strong><em>- or -</em></strong>
                </p>
                <div class="form-group">
                    <label asp-for="Host.MacAddress" class="control-label">Mac address</label>
                    <InputText @bind-Value="model.MacAddress" class="form-control" />
                    <span asp-validation-for="Host.MacAddress" class="text-danger"></span>
                </div>
                <div class="form-group">
                    @if (Creating)
                    {
                        <button class="btn btn-primary" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Creating...
                        </button>
                    }
                    else
                    {
                        <input type="submit" value="Create" class="btn btn-primary" />
                    }
                </div>
            </EditForm>
        </div>
    </div>

    <div>
        <a href="">
            Back to List
        </a>
    </div>
</div>

@code {
    AddHostViewModel model = new AddHostViewModel();
    string Alert = null;
    bool Creating = false;

    private Host GetMacHost()
    {
        var mac = model.MacAddress.ParseMacAddress();
        return new Host()
        {
            Caption = model.Caption,
            MacAddress = mac
        };
    }

    private async Task<Host> GetHostByName()
    {
        (var ip, var name) = await AddressService.GetIpAndName(model.Hostname);
        var mac = (await AddressService.GetMac(ip)).GetAddressBytes();
        return new Host()
        {
            Caption = model.Caption,
            Hostname = name,
            MacAddress = mac
        };
    }

    private async Task<Host> GetHost()
    {
        if (!string.IsNullOrEmpty(model.MacAddress))
            return GetMacHost();
        return await GetHostByName();
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        Creating = true;
        Host host;
        try
        {
            host = await GetHost();
        }
        catch (PlatformNotSupportedException ex)
        {
            L.GetHostPlatformNotSupportedException(ex);
            Alert = "This operation is not supported on the operating system this application is running on. Adding hosts by hostname is currently not supported on Mac OS X due to the lack of an appropriate ARP API.";
            Creating = false;
            return;
        }
        catch (SocketException sockEx) when (sockEx.ErrorCode == 11001)
        {
            // https://docs.microsoft.com/en-us/windows/win32/winsock/windows-sockets-error-codes-2
            /* WSAHOST_NOT_FOUND
               Host not found.
               No such host is known. The name is not an official host name or alias, or it cannot be found in the database(s) being queried. This error may also be returned for protocol and service queries, and means that the specified name could not be found in the relevant database.
             */
            L.GetHostHostNotFound(model.Caption, model.Hostname, model.MacAddress, sockEx);
            Alert = "This hostname could not be found.";
            Creating = false;
            return;
        }
        catch (Exception ex)
        {
            L.GetHostUnknownException(model.Caption, model.Hostname, model.MacAddress, ex);
            Alert = "This hostname or it's mac address could not be found.";
            Creating = false;
            return;
        }
        try
        {
            await HostService.Add(host);
            L.HostAdded(host);
        }
        catch (IHostService.DuplicateEntryException duplEx)
        {
            L.AddHostDuplicateEntryException(host, duplEx);
            Alert = string.IsNullOrEmpty(duplEx.Value)
                ? $"Creation failed as an entry with this {duplEx.Field.ToLower()} does already exist."
                : $"Creation failed as an entry with {duplEx.Field.ToLower()} '{duplEx.Value}' does already exist.";
            Creating = false;
            return;
        }
        catch (Exception ex)
        {
            L.AddHostUnknownException(ex);
            Alert = "This entry could not be created. Maybe a similar entry which shares some of the entered values does already exist. Please contact the administrator.";
            Creating = false;
            return;
        }
        NavigationManager.NavigateTo("/");
    }
}
